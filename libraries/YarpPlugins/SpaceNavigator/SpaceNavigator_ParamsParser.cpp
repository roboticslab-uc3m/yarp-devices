/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Jul 20 01:39:59 2025


#include "SpaceNavigator_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(SpaceNavigatorParamsCOMPONENT, "yarp.device.SpaceNavigator")
}


SpaceNavigator_ParamsParser::SpaceNavigator_ParamsParser()
{
}


std::vector<std::string> SpaceNavigator_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("deadband");
    params.push_back("fullScaleX");
    params.push_back("fullScaleY");
    params.push_back("fullScaleZ");
    params.push_back("fullScaleRX");
    params.push_back("fullScaleRY");
    params.push_back("fullScaleRZ");
    params.push_back("maxNoDataIterations");
    return params;
}


bool      SpaceNavigator_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(SpaceNavigatorParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter deadband
    {
        if (config.check("deadband"))
        {
            m_deadband = config.find("deadband").asFloat64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'deadband' using value:" << m_deadband;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'deadband' using DEFAULT value:" << m_deadband;
        }
        prop_check.unput("deadband");
    }

    //Parser of parameter fullScaleX
    {
        if (config.check("fullScaleX"))
        {
            m_fullScaleX = config.find("fullScaleX").asFloat64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleX' using value:" << m_fullScaleX;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleX' using DEFAULT value:" << m_fullScaleX;
        }
        prop_check.unput("fullScaleX");
    }

    //Parser of parameter fullScaleY
    {
        if (config.check("fullScaleY"))
        {
            m_fullScaleY = config.find("fullScaleY").asFloat64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleY' using value:" << m_fullScaleY;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleY' using DEFAULT value:" << m_fullScaleY;
        }
        prop_check.unput("fullScaleY");
    }

    //Parser of parameter fullScaleZ
    {
        if (config.check("fullScaleZ"))
        {
            m_fullScaleZ = config.find("fullScaleZ").asFloat64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleZ' using value:" << m_fullScaleZ;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleZ' using DEFAULT value:" << m_fullScaleZ;
        }
        prop_check.unput("fullScaleZ");
    }

    //Parser of parameter fullScaleRX
    {
        if (config.check("fullScaleRX"))
        {
            m_fullScaleRX = config.find("fullScaleRX").asFloat64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleRX' using value:" << m_fullScaleRX;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleRX' using DEFAULT value:" << m_fullScaleRX;
        }
        prop_check.unput("fullScaleRX");
    }

    //Parser of parameter fullScaleRY
    {
        if (config.check("fullScaleRY"))
        {
            m_fullScaleRY = config.find("fullScaleRY").asFloat64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleRY' using value:" << m_fullScaleRY;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleRY' using DEFAULT value:" << m_fullScaleRY;
        }
        prop_check.unput("fullScaleRY");
    }

    //Parser of parameter fullScaleRZ
    {
        if (config.check("fullScaleRZ"))
        {
            m_fullScaleRZ = config.find("fullScaleRZ").asFloat64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleRZ' using value:" << m_fullScaleRZ;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'fullScaleRZ' using DEFAULT value:" << m_fullScaleRZ;
        }
        prop_check.unput("fullScaleRZ");
    }

    //Parser of parameter maxNoDataIterations
    {
        if (config.check("maxNoDataIterations"))
        {
            m_maxNoDataIterations = config.find("maxNoDataIterations").asInt64();
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'maxNoDataIterations' using value:" << m_maxNoDataIterations;
        }
        else
        {
            yCInfo(SpaceNavigatorParamsCOMPONENT) << "Parameter 'maxNoDataIterations' using DEFAULT value:" << m_maxNoDataIterations;
        }
        prop_check.unput("maxNoDataIterations");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(SpaceNavigatorParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(SpaceNavigatorParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      SpaceNavigator_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: SpaceNavigator\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'deadband': deadband\n");
    doc = doc + std::string("'fullScaleX': full scale on translation axis X\n");
    doc = doc + std::string("'fullScaleY': full scale on translation axis Y\n");
    doc = doc + std::string("'fullScaleZ': full scale on translation axis Z\n");
    doc = doc + std::string("'fullScaleRX': full scale on rotation axis X\n");
    doc = doc + std::string("'fullScaleRY': full scale on rotation axis Y\n");
    doc = doc + std::string("'fullScaleRZ': full scale on rotation axis Z\n");
    doc = doc + std::string("'maxNoDataIterations': reset after this many poll events\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device SpaceNavigator --deadband 0.125 --fullScaleX 460.0 --fullScaleY 430.0 --fullScaleZ 440.0 --fullScaleRX 415.0 --fullScaleRY 405.0 --fullScaleRZ 435.0 --maxNoDataIterations 100\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device SpaceNavigator\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
