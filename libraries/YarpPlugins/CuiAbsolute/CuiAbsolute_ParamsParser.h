/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#ifndef CUIABSOLUTE_PARAMSPARSER_H
#define CUIABSOLUTE_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class CuiAbsolute.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value | Required | Description                          | Notes      |
* |:----------:|:--------------:|:------:|:-----:|:-------------:|:--------:|:------------------------------------:|:----------:|
* | -          | canId          | int    | -     | -             | 1        | CAN bus ID                           | 1-127      |
* | -          | reverse        | bool   | -     | -             | 1        | reverse counting                     | -          |
* | -          | timeout        | double | s     | 0.25          | 0        | acquisition timeout                  | -          |
* | -          | maxRetries     | int    | -     | 10            | 0        | maximum number of retries on timeout | -          |
* | -          | mode           | string | -     | -             | 1        | publish mode                         | push, pull |
* | -          | pushDelay      | int    | -     | 0             | 0        | push mode delay                      | 0-255      |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device CuiAbsolute --canId <mandatory_value> --reverse <mandatory_value> --timeout 0.25 --maxRetries 10 --mode <mandatory_value> --pushDelay 0
* \endcode
*
* \code{.unparsed}
* yarpdev --device CuiAbsolute --canId <mandatory_value> --reverse <mandatory_value> --mode <mandatory_value>
* \endcode
*
*/

class CuiAbsolute_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    CuiAbsolute_ParamsParser();
    ~CuiAbsolute_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"CuiAbsolute"};
    const std::string m_device_name = {"CuiAbsolute"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_canId_defaultValue = {""};
    const std::string m_reverse_defaultValue = {""};
    const std::string m_timeout_defaultValue = {"0.25"};
    const std::string m_maxRetries_defaultValue = {"10"};
    const std::string m_mode_defaultValue = {""};
    const std::string m_pushDelay_defaultValue = {"0"};

    int m_canId = {0}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    bool m_reverse = {false}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    double m_timeout = {0.25};
    int m_maxRetries = {10};
    std::string m_mode = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    int m_pushDelay = {0};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
