/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#include "JointCalibrator_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(JointCalibratorParamsCOMPONENT, "yarp.device.JointCalibrator")
}


JointCalibrator_ParamsParser::JointCalibrator_ParamsParser()
{
}


std::vector<std::string> JointCalibrator_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("joints");
    params.push_back("block");
    params.push_back("home");
    params.push_back("homeVel");
    params.push_back("homeAcc");
    params.push_back("park");
    params.push_back("parkVel");
    params.push_back("parkAcc");
    params.push_back("homes");
    params.push_back("homeVels");
    params.push_back("homeAccs");
    params.push_back("parks");
    params.push_back("parkVels");
    params.push_back("parkAccs");
    return params;
}


bool      JointCalibrator_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(JointCalibratorParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter joints
    {
        if (config.check("joints"))
        {
            m_joints = config.find("joints").asInt64();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'joints' using value:" << m_joints;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'joints' using DEFAULT value:" << m_joints;
        }
        prop_check.unput("joints");
    }

    //Parser of parameter block
    {
        if (config.check("block"))
        {
            m_block = config.find("block").asBool();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'block' using value:" << m_block;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'block' using DEFAULT value:" << m_block;
        }
        prop_check.unput("block");
    }

    //Parser of parameter home
    {
        if (config.check("home"))
        {
            m_home = config.find("home").asFloat64();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'home' using value:" << m_home;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'home' using DEFAULT value:" << m_home;
        }
        prop_check.unput("home");
    }

    //Parser of parameter homeVel
    {
        if (config.check("homeVel"))
        {
            m_homeVel = config.find("homeVel").asFloat64();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeVel' using value:" << m_homeVel;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeVel' using DEFAULT value:" << m_homeVel;
        }
        prop_check.unput("homeVel");
    }

    //Parser of parameter homeAcc
    {
        if (config.check("homeAcc"))
        {
            m_homeAcc = config.find("homeAcc").asFloat64();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeAcc' using value:" << m_homeAcc;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeAcc' using DEFAULT value:" << m_homeAcc;
        }
        prop_check.unput("homeAcc");
    }

    //Parser of parameter park
    {
        if (config.check("park"))
        {
            m_park = config.find("park").asFloat64();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'park' using value:" << m_park;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'park' using DEFAULT value:" << m_park;
        }
        prop_check.unput("park");
    }

    //Parser of parameter parkVel
    {
        if (config.check("parkVel"))
        {
            m_parkVel = config.find("parkVel").asFloat64();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkVel' using value:" << m_parkVel;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkVel' using DEFAULT value:" << m_parkVel;
        }
        prop_check.unput("parkVel");
    }

    //Parser of parameter parkAcc
    {
        if (config.check("parkAcc"))
        {
            m_parkAcc = config.find("parkAcc").asFloat64();
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkAcc' using value:" << m_parkAcc;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkAcc' using DEFAULT value:" << m_parkAcc;
        }
        prop_check.unput("parkAcc");
    }

    //Parser of parameter homes
    {
        if (config.check("homes"))
        {
            {
                m_homes.clear();
                yarp::os::Bottle* tempBot = config.find("homes").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_homes.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(JointCalibratorParamsCOMPONENT) <<"parameter 'homes' is not a properly formatted bottle";
                }
            }
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homes' using value:" << m_homes;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homes' using DEFAULT value:" << m_homes;
        }
        prop_check.unput("homes");
    }

    //Parser of parameter homeVels
    {
        if (config.check("homeVels"))
        {
            {
                m_homeVels.clear();
                yarp::os::Bottle* tempBot = config.find("homeVels").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_homeVels.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(JointCalibratorParamsCOMPONENT) <<"parameter 'homeVels' is not a properly formatted bottle";
                }
            }
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeVels' using value:" << m_homeVels;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeVels' using DEFAULT value:" << m_homeVels;
        }
        prop_check.unput("homeVels");
    }

    //Parser of parameter homeAccs
    {
        if (config.check("homeAccs"))
        {
            {
                m_homeAccs.clear();
                yarp::os::Bottle* tempBot = config.find("homeAccs").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_homeAccs.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(JointCalibratorParamsCOMPONENT) <<"parameter 'homeAccs' is not a properly formatted bottle";
                }
            }
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeAccs' using value:" << m_homeAccs;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'homeAccs' using DEFAULT value:" << m_homeAccs;
        }
        prop_check.unput("homeAccs");
    }

    //Parser of parameter parks
    {
        if (config.check("parks"))
        {
            {
                m_parks.clear();
                yarp::os::Bottle* tempBot = config.find("parks").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_parks.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(JointCalibratorParamsCOMPONENT) <<"parameter 'parks' is not a properly formatted bottle";
                }
            }
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parks' using value:" << m_parks;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parks' using DEFAULT value:" << m_parks;
        }
        prop_check.unput("parks");
    }

    //Parser of parameter parkVels
    {
        if (config.check("parkVels"))
        {
            {
                m_parkVels.clear();
                yarp::os::Bottle* tempBot = config.find("parkVels").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_parkVels.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(JointCalibratorParamsCOMPONENT) <<"parameter 'parkVels' is not a properly formatted bottle";
                }
            }
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkVels' using value:" << m_parkVels;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkVels' using DEFAULT value:" << m_parkVels;
        }
        prop_check.unput("parkVels");
    }

    //Parser of parameter parkAccs
    {
        if (config.check("parkAccs"))
        {
            {
                m_parkAccs.clear();
                yarp::os::Bottle* tempBot = config.find("parkAccs").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_parkAccs.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(JointCalibratorParamsCOMPONENT) <<"parameter 'parkAccs' is not a properly formatted bottle";
                }
            }
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkAccs' using value:" << m_parkAccs;
        }
        else
        {
            yCInfo(JointCalibratorParamsCOMPONENT) << "Parameter 'parkAccs' using DEFAULT value:" << m_parkAccs;
        }
        prop_check.unput("parkAccs");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(JointCalibratorParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(JointCalibratorParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      JointCalibrator_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: JointCalibrator\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'joints': number of controlled axes\n");
    doc = doc + std::string("'block': commands should block\n");
    doc = doc + std::string("'home': zero position (global)\n");
    doc = doc + std::string("'homeVel': zero velocity (global)\n");
    doc = doc + std::string("'homeAcc': zero acceleration (global)\n");
    doc = doc + std::string("'park': park position (global)\n");
    doc = doc + std::string("'parkVel': park velocity (global)\n");
    doc = doc + std::string("'parkAcc': park acceleration (global)\n");
    doc = doc + std::string("'homes': zero position (individual)\n");
    doc = doc + std::string("'homeVels': zero velocity (individual)\n");
    doc = doc + std::string("'homeAccs': zero acceleration (individual)\n");
    doc = doc + std::string("'parks': park position (individual)\n");
    doc = doc + std::string("'parkVels': park velocity (individual)\n");
    doc = doc + std::string("'parkAccs': park acceleration (individual)\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device JointCalibrator --joints 0 --block false --home 0.0 --homeVel 0.0 --homeAcc 0.0 --park 0.0 --parkVel 0.0 --parkAcc 0.0 --homes <optional_value> --homeVels <optional_value> --homeAccs <optional_value> --parks <optional_value> --parkVels <optional_value> --parkAccs <optional_value>\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device JointCalibrator\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
