/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#ifndef JOINTCALIBRATOR_PARAMSPARSER_H
#define JOINTCALIBRATOR_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class JointCalibrator.
*
* These are the used parameters:
* | Group name | Parameter name | Type           | Units   | Default Value | Required | Description                    | Notes |
* |:----------:|:--------------:|:--------------:|:-------:|:-------------:|:--------:|:------------------------------:|:-----:|
* | -          | joints         | int            | -       | 0             | 0        | number of controlled axes      | -     |
* | -          | block          | bool           | -       | false         | 0        | commands should block          | -     |
* | -          | home           | double         | deg     | 0.0           | 0        | zero position (global)         | -     |
* | -          | homeVel        | double         | deg/s   | 0.0           | 0        | zero velocity (global)         | -     |
* | -          | homeAcc        | double         | deg/s^2 | 0.0           | 0        | zero acceleration (global)     | -     |
* | -          | park           | double         | deg     | 0.0           | 0        | park position (global)         | -     |
* | -          | parkVel        | double         | deg/s   | 0.0           | 0        | park velocity (global)         | -     |
* | -          | parkAcc        | double         | deg/s^2 | 0.0           | 0        | park acceleration (global)     | -     |
* | -          | homes          | vector<double> | deg     | -             | 0        | zero position (individual)     | -     |
* | -          | homeVels       | vector<double> | deg/s   | -             | 0        | zero velocity (individual)     | -     |
* | -          | homeAccs       | vector<double> | deg/s^2 | -             | 0        | zero acceleration (individual) | -     |
* | -          | parks          | vector<double> | deg     | -             | 0        | park position (individual)     | -     |
* | -          | parkVels       | vector<double> | deg/s   | -             | 0        | park velocity (individual)     | -     |
* | -          | parkAccs       | vector<double> | deg/s^2 | -             | 0        | park acceleration (individual) | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device JointCalibrator --joints 0 --block false --home 0.0 --homeVel 0.0 --homeAcc 0.0 --park 0.0 --parkVel 0.0 --parkAcc 0.0 --homes <optional_value> --homeVels <optional_value> --homeAccs <optional_value> --parks <optional_value> --parkVels <optional_value> --parkAccs <optional_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device JointCalibrator
* \endcode
*
*/

class JointCalibrator_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    JointCalibrator_ParamsParser();
    ~JointCalibrator_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"JointCalibrator"};
    const std::string m_device_name = {"JointCalibrator"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_joints_defaultValue = {"0"};
    const std::string m_block_defaultValue = {"false"};
    const std::string m_home_defaultValue = {"0.0"};
    const std::string m_homeVel_defaultValue = {"0.0"};
    const std::string m_homeAcc_defaultValue = {"0.0"};
    const std::string m_park_defaultValue = {"0.0"};
    const std::string m_parkVel_defaultValue = {"0.0"};
    const std::string m_parkAcc_defaultValue = {"0.0"};
    const std::string m_homes_defaultValue = {""};
    const std::string m_homeVels_defaultValue = {""};
    const std::string m_homeAccs_defaultValue = {""};
    const std::string m_parks_defaultValue = {""};
    const std::string m_parkVels_defaultValue = {""};
    const std::string m_parkAccs_defaultValue = {""};

    int m_joints = {0};
    bool m_block = {false};
    double m_home = {0.0};
    double m_homeVel = {0.0};
    double m_homeAcc = {0.0};
    double m_park = {0.0};
    double m_parkVel = {0.0};
    double m_parkAcc = {0.0};
    std::vector<double> m_homes = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_homeVels = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_homeAccs = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_parks = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_parkVels = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_parkAccs = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
