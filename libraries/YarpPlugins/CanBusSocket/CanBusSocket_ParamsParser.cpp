/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#include "CanBusSocket_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(CanBusSocketParamsCOMPONENT, "yarp.device.CanBusSocket")
}


CanBusSocket_ParamsParser::CanBusSocket_ParamsParser()
{
}


std::vector<std::string> CanBusSocket_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("port");
    params.push_back("bitrate");
    params.push_back("blockingMode");
    params.push_back("allowPermissive");
    params.push_back("rxTimeoutMs");
    params.push_back("txTimeoutMs");
    params.push_back("filterFunctionCodes");
    params.push_back("filteredIds");
    return params;
}


bool      CanBusSocket_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(CanBusSocketParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter port
    {
        if (config.check("port"))
        {
            m_port = config.find("port").asString();
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'port' using value:" << m_port;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'port' using DEFAULT value:" << m_port;
        }
        prop_check.unput("port");
    }

    //Parser of parameter bitrate
    {
        if (config.check("bitrate"))
        {
            m_bitrate = config.find("bitrate").asInt64();
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'bitrate' using value:" << m_bitrate;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'bitrate' using DEFAULT value:" << m_bitrate;
        }
        prop_check.unput("bitrate");
    }

    //Parser of parameter blockingMode
    {
        if (config.check("blockingMode"))
        {
            m_blockingMode = config.find("blockingMode").asBool();
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'blockingMode' using value:" << m_blockingMode;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'blockingMode' using DEFAULT value:" << m_blockingMode;
        }
        prop_check.unput("blockingMode");
    }

    //Parser of parameter allowPermissive
    {
        if (config.check("allowPermissive"))
        {
            m_allowPermissive = config.find("allowPermissive").asBool();
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'allowPermissive' using value:" << m_allowPermissive;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'allowPermissive' using DEFAULT value:" << m_allowPermissive;
        }
        prop_check.unput("allowPermissive");
    }

    //Parser of parameter rxTimeoutMs
    {
        if (config.check("rxTimeoutMs"))
        {
            m_rxTimeoutMs = config.find("rxTimeoutMs").asInt64();
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'rxTimeoutMs' using value:" << m_rxTimeoutMs;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'rxTimeoutMs' using DEFAULT value:" << m_rxTimeoutMs;
        }
        prop_check.unput("rxTimeoutMs");
    }

    //Parser of parameter txTimeoutMs
    {
        if (config.check("txTimeoutMs"))
        {
            m_txTimeoutMs = config.find("txTimeoutMs").asInt64();
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'txTimeoutMs' using value:" << m_txTimeoutMs;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'txTimeoutMs' using DEFAULT value:" << m_txTimeoutMs;
        }
        prop_check.unput("txTimeoutMs");
    }

    //Parser of parameter filterFunctionCodes
    {
        if (config.check("filterFunctionCodes"))
        {
            m_filterFunctionCodes = config.find("filterFunctionCodes").asBool();
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'filterFunctionCodes' using value:" << m_filterFunctionCodes;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'filterFunctionCodes' using DEFAULT value:" << m_filterFunctionCodes;
        }
        prop_check.unput("filterFunctionCodes");
    }

    //Parser of parameter filteredIds
    {
        if (config.check("filteredIds"))
        {
            {
                m_filteredIds.clear();
                yarp::os::Bottle* tempBot = config.find("filteredIds").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_filteredIds.push_back(tempBot->get(i).asInt64());
                    }
                }
                else
                {
                     yCError(CanBusSocketParamsCOMPONENT) <<"parameter 'filteredIds' is not a properly formatted bottle";
                }
            }
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'filteredIds' using value:" << m_filteredIds;
        }
        else
        {
            yCInfo(CanBusSocketParamsCOMPONENT) << "Parameter 'filteredIds' using DEFAULT value:" << m_filteredIds;
        }
        prop_check.unput("filteredIds");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(CanBusSocketParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(CanBusSocketParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      CanBusSocket_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: CanBusSocket\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'port': CAN socket interface\n");
    doc = doc + std::string("'bitrate': CAN bitrate\n");
    doc = doc + std::string("'blockingMode': blocking mode enabled\n");
    doc = doc + std::string("'allowPermissive': read/write permissive mode\n");
    doc = doc + std::string("'rxTimeoutMs': RX timeout\n");
    doc = doc + std::string("'txTimeoutMs': TX timeout\n");
    doc = doc + std::string("'filterFunctionCodes': filter mask ignores CANopen function codes\n");
    doc = doc + std::string("'filteredIds': filtered node IDs\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device CanBusSocket --port can0 --bitrate 0 --blockingMode true --allowPermissive false --rxTimeoutMs 1 --txTimeoutMs 0 --filterFunctionCodes true --filteredIds <optional_value>\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device CanBusSocket\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
