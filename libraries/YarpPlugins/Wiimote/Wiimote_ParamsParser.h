/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Jul 20 01:39:59 2025


#ifndef WIIMOTE_PARAMSPARSER_H
#define WIIMOTE_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Wiimote.
*
* These are the used parameters:
* | Group name | Parameter name | Type | Units | Default Value | Required | Description                           | Notes |
* |:----------:|:--------------:|:----:|:-----:|:-------------:|:--------:|:-------------------------------------:|:-----:|
* | -          | deviceId       | int  | -     | 1             | 0        | Wiimote device number                 | -     |
* | -          | calibZeroX     | int  | -     | -30           | 0        | normalization value for X axis (zero) | -     |
* | -          | calibZeroY     | int  | -     | -22           | 0        | normalization value for Y axis (zero) | -     |
* | -          | calibZeroZ     | int  | -     | 72            | 0        | normalization value for Z axis (zero) | -     |
* | -          | calibOneX      | int  | -     | 69            | 0        | normalization value for X axis (one)  | -     |
* | -          | calibOneY      | int  | -     | -123          | 0        | normalization value for Y axis (one)  | -     |
* | -          | calibOneZ      | int  | -     | -25           | 0        | normalization value for Z axis (one)  | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device Wiimote --deviceId 1 --calibZeroX -30 --calibZeroY -22 --calibZeroZ 72 --calibOneX 69 --calibOneY -123 --calibOneZ -25
* \endcode
*
* \code{.unparsed}
* yarpdev --device Wiimote
* \endcode
*
*/

class Wiimote_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Wiimote_ParamsParser();
    ~Wiimote_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Wiimote"};
    const std::string m_device_name = {"Wiimote"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_deviceId_defaultValue = {"1"};
    const std::string m_calibZeroX_defaultValue = {"-30"};
    const std::string m_calibZeroY_defaultValue = {"-22"};
    const std::string m_calibZeroZ_defaultValue = {"72"};
    const std::string m_calibOneX_defaultValue = {"69"};
    const std::string m_calibOneY_defaultValue = {"-123"};
    const std::string m_calibOneZ_defaultValue = {"-25"};

    int m_deviceId = {1};
    int m_calibZeroX = {-30};
    int m_calibZeroY = {-22};
    int m_calibZeroZ = {72};
    int m_calibOneX = {69};
    int m_calibOneY = {-123};
    int m_calibOneZ = {-25};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
