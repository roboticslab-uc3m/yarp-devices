/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#ifndef FAKEJOINT_PARAMSPARSER_H
#define FAKEJOINT_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class FakeJoint.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value | Required | Description            | Notes |
* |:----------:|:--------------:|:------:|:-----:|:-------------:|:--------:|:----------------------:|:-----:|
* | -          | jointName      | string | -     | -             | 0        | name of the fake joint | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device FakeJoint --jointName <optional_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device FakeJoint
* \endcode
*
*/

class FakeJoint_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    FakeJoint_ParamsParser();
    ~FakeJoint_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"FakeJoint"};
    const std::string m_device_name = {"FakeJoint"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_jointName_defaultValue = {""};

    std::string m_jointName = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
