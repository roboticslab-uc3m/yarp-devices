/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#include "Jr3Pci_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(Jr3PciParamsCOMPONENT, "yarp.device.Jr3Pci")
}


Jr3Pci_ParamsParser::Jr3Pci_ParamsParser()
{
    //Default value of parameternames
    {
        m_names.clear();
        yarp::os::Value tempVal;
        tempVal.fromString(m_names_defaultValue.c_str());
        yarp::os::Bottle* tempBot = tempVal.asList();
        if (tempBot && tempBot->size()!=0)
        {
            for (size_t i=0; i<tempBot->size(); i++)
            {
                m_names.push_back(tempBot->get(i).asString());
            }
        }
        else
        {
             yError() <<"parameter 'names' is not a properly formatted bottle";
        }
    }

}


std::vector<std::string> Jr3Pci_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("names");
    params.push_back("filter");
    params.push_back("levogyrate");
    return params;
}


bool      Jr3Pci_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(Jr3PciParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter names
    {
        if (config.check("names"))
        {
            {
                m_names.clear();
                yarp::os::Bottle* tempBot = config.find("names").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_names.push_back(tempBot->get(i).asString());
                    }
                }
                else
                {
                     yCError(Jr3PciParamsCOMPONENT) <<"parameter 'names' is not a properly formatted bottle";
                }
            }
            yCInfo(Jr3PciParamsCOMPONENT) << "Parameter 'names' using value:" << m_names;
        }
        else
        {
            yCInfo(Jr3PciParamsCOMPONENT) << "Parameter 'names' using DEFAULT value:" << m_names;
        }
        prop_check.unput("names");
    }

    //Parser of parameter filter
    {
        if (config.check("filter"))
        {
            m_filter = config.find("filter").asInt64();
            yCInfo(Jr3PciParamsCOMPONENT) << "Parameter 'filter' using value:" << m_filter;
        }
        else
        {
            yCInfo(Jr3PciParamsCOMPONENT) << "Parameter 'filter' using DEFAULT value:" << m_filter;
        }
        prop_check.unput("filter");
    }

    //Parser of parameter levogyrate
    {
        if (config.check("levogyrate"))
        {
            m_levogyrate = config.find("levogyrate").asBool();
            yCInfo(Jr3PciParamsCOMPONENT) << "Parameter 'levogyrate' using value:" << m_levogyrate;
        }
        else
        {
            yCInfo(Jr3PciParamsCOMPONENT) << "Parameter 'levogyrate' using DEFAULT value:" << m_levogyrate;
        }
        prop_check.unput("levogyrate");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(Jr3PciParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(Jr3PciParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      Jr3Pci_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: Jr3Pci\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'names': sensor names\n");
    doc = doc + std::string("'filter': filter ID\n");
    doc = doc + std::string("'levogyrate': assume levogyrate XYZ coordinates\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device Jr3Pci --names \" (ch0 ch1 ch2 ch3) \" --filter 0 --levogyrate false\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device Jr3Pci\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
