/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#ifndef JR3MBED_PARAMSPARSER_H
#define JR3MBED_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Jr3Mbed.
*
* These are the used parameters:
* | Group name | Parameter name    | Type        | Units   | Default Value | Required | Description                            | Notes               |
* |:----------:|:-----------------:|:-----------:|:-------:|:-------------:|:--------:|:--------------------------------------:|:-------------------:|
* | -          | canId             | int         | -       | 0             | 0        | CAN bus ID                             | 1-127               |
* | -          | name              | string      | -       | -             | 0        | sensor name                            | -                   |
* | -          | filter            | double      | Hz      | 0.0           | 0        | cutoff frequency for low-pass filter   | 0.0-655.35          |
* | -          | ackTimeout        | double      | s       | 0.25          | 0        | CAN acknowledge timeout                | -                   |
* | -          | fullScales        | vector<int> | N, daNm | -             | 0        | full scales for each axis              | 3\*N, 3\*daNm       |
* | -          | asyncPeriod       | double      | s       | 0.0           | 0        | period of asynchronous publishing mode | 0.0: disabled       |
* | -          | monitorPeriod     | double      | s       | 0.1           | 0        | monitor thread period                  | -                   |
* | -          | diagnosticsPeriod | double      | s       | 0.0           | 0        | diagnostics period                     | less than 8 seconds |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device Jr3Mbed --canId 0 --name <optional_value> --filter 0.0 --ackTimeout 0.25 --fullScales <optional_value> --asyncPeriod 0.0 --monitorPeriod 0.1 --diagnosticsPeriod 0.0
* \endcode
*
* \code{.unparsed}
* yarpdev --device Jr3Mbed
* \endcode
*
*/

class Jr3Mbed_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Jr3Mbed_ParamsParser();
    ~Jr3Mbed_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Jr3Mbed"};
    const std::string m_device_name = {"Jr3Mbed"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_canId_defaultValue = {"0"};
    const std::string m_name_defaultValue = {""};
    const std::string m_filter_defaultValue = {"0.0"};
    const std::string m_ackTimeout_defaultValue = {"0.25"};
    const std::string m_fullScales_defaultValue = {""};
    const std::string m_asyncPeriod_defaultValue = {"0.0"};
    const std::string m_monitorPeriod_defaultValue = {"0.1"};
    const std::string m_diagnosticsPeriod_defaultValue = {"0.0"};

    int m_canId = {0};
    std::string m_name = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    double m_filter = {0.0};
    double m_ackTimeout = {0.25};
    std::vector<int> m_fullScales = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    double m_asyncPeriod = {0.0};
    double m_monitorPeriod = {0.1};
    double m_diagnosticsPeriod = {0.0};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
