/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#include "Jr3Mbed_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(Jr3MbedParamsCOMPONENT, "yarp.device.Jr3Mbed")
}


Jr3Mbed_ParamsParser::Jr3Mbed_ParamsParser()
{
}


std::vector<std::string> Jr3Mbed_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("canId");
    params.push_back("name");
    params.push_back("filter");
    params.push_back("ackTimeout");
    params.push_back("fullScales");
    params.push_back("asyncPeriod");
    params.push_back("monitorPeriod");
    params.push_back("diagnosticsPeriod");
    return params;
}


bool      Jr3Mbed_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(Jr3MbedParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter canId
    {
        if (config.check("canId"))
        {
            m_canId = config.find("canId").asInt64();
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'canId' using value:" << m_canId;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'canId' using DEFAULT value:" << m_canId;
        }
        prop_check.unput("canId");
    }

    //Parser of parameter name
    {
        if (config.check("name"))
        {
            m_name = config.find("name").asString();
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'name' using value:" << m_name;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'name' using DEFAULT value:" << m_name;
        }
        prop_check.unput("name");
    }

    //Parser of parameter filter
    {
        if (config.check("filter"))
        {
            m_filter = config.find("filter").asFloat64();
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'filter' using value:" << m_filter;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'filter' using DEFAULT value:" << m_filter;
        }
        prop_check.unput("filter");
    }

    //Parser of parameter ackTimeout
    {
        if (config.check("ackTimeout"))
        {
            m_ackTimeout = config.find("ackTimeout").asFloat64();
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'ackTimeout' using value:" << m_ackTimeout;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'ackTimeout' using DEFAULT value:" << m_ackTimeout;
        }
        prop_check.unput("ackTimeout");
    }

    //Parser of parameter fullScales
    {
        if (config.check("fullScales"))
        {
            {
                m_fullScales.clear();
                yarp::os::Bottle* tempBot = config.find("fullScales").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_fullScales.push_back(tempBot->get(i).asInt64());
                    }
                }
                else
                {
                     yCError(Jr3MbedParamsCOMPONENT) <<"parameter 'fullScales' is not a properly formatted bottle";
                }
            }
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'fullScales' using value:" << m_fullScales;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'fullScales' using DEFAULT value:" << m_fullScales;
        }
        prop_check.unput("fullScales");
    }

    //Parser of parameter asyncPeriod
    {
        if (config.check("asyncPeriod"))
        {
            m_asyncPeriod = config.find("asyncPeriod").asFloat64();
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'asyncPeriod' using value:" << m_asyncPeriod;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'asyncPeriod' using DEFAULT value:" << m_asyncPeriod;
        }
        prop_check.unput("asyncPeriod");
    }

    //Parser of parameter monitorPeriod
    {
        if (config.check("monitorPeriod"))
        {
            m_monitorPeriod = config.find("monitorPeriod").asFloat64();
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'monitorPeriod' using value:" << m_monitorPeriod;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'monitorPeriod' using DEFAULT value:" << m_monitorPeriod;
        }
        prop_check.unput("monitorPeriod");
    }

    //Parser of parameter diagnosticsPeriod
    {
        if (config.check("diagnosticsPeriod"))
        {
            m_diagnosticsPeriod = config.find("diagnosticsPeriod").asFloat64();
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'diagnosticsPeriod' using value:" << m_diagnosticsPeriod;
        }
        else
        {
            yCInfo(Jr3MbedParamsCOMPONENT) << "Parameter 'diagnosticsPeriod' using DEFAULT value:" << m_diagnosticsPeriod;
        }
        prop_check.unput("diagnosticsPeriod");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(Jr3MbedParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(Jr3MbedParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      Jr3Mbed_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: Jr3Mbed\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'canId': CAN bus ID\n");
    doc = doc + std::string("'name': sensor name\n");
    doc = doc + std::string("'filter': cutoff frequency for low-pass filter\n");
    doc = doc + std::string("'ackTimeout': CAN acknowledge timeout\n");
    doc = doc + std::string("'fullScales': full scales for each axis\n");
    doc = doc + std::string("'asyncPeriod': period of asynchronous publishing mode\n");
    doc = doc + std::string("'monitorPeriod': monitor thread period\n");
    doc = doc + std::string("'diagnosticsPeriod': diagnostics period\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device Jr3Mbed --canId 0 --name <optional_value> --filter 0.0 --ackTimeout 0.25 --fullScales <optional_value> --asyncPeriod 0.0 --monitorPeriod 0.1 --diagnosticsPeriod 0.0\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device Jr3Mbed\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
