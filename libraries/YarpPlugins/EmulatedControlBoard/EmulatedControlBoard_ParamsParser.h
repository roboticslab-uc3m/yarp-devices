/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Apr 20 14:33:40 2025


#ifndef EMULATEDCONTROLBOARD_PARAMSPARSER_H
#define EMULATEDCONTROLBOARD_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class EmulatedControlBoard.
*
* These are the used parameters:
* | Group name | Parameter name   | Type           | Units        | Default Value      | Required | Description                         | Notes          |
* |:----------:|:----------------:|:--------------:|:------------:|:------------------:|:--------:|:-----------------------------------:|:--------------:|
* | -          | axes             | int            | -            | 5                  | 0        | number of axes to control           | -              |
* | -          | jmcMs            | int            | ms           | 20                 | 0        | period of JMC periodic thread       | -              |
* | -          | mode             | string         | -            | -                  | 1        | control mode                        | pos, vel, posd |
* | -          | genInitPos       | double         | m or deg     | 0.0                | 0        | general initialization positions    | -              |
* | -          | genJointTol      | double         | m or deg     | 0.25               | 0        | general joint tolerances            | -              |
* | -          | genMaxLimit      | double         | m or deg     | 180.0              | 0        | general max limits                  | -              |
* | -          | genMinLimit      | double         | m or deg     | -180.0             | 0        | general min limits                  | -              |
* | -          | genRefSpeed      | double         | m/s or deg/s | 7.5                | 0        | general ref speed                   | -              |
* | -          | genEncRawExposed | double         | -            | 0.0174532925199433 | 0        | general EncRawExposed               | -              |
* | -          | genVelRawExposed | double         | -            | 0.0174532925199433 | 0        | general VelRawExposed               | -              |
* | -          | initPoss         | vector<double> | m or deg     | -                  | 0        | individual initialization positions | -              |
* | -          | jointTols        | vector<double> | m or deg     | -                  | 0        | individual joint tolerances         | -              |
* | -          | maxLimits        | vector<double> | m or deg     | -                  | 0        | individual max limits               | -              |
* | -          | minLimits        | vector<double> | m or deg     | -                  | 0        | individual min limits               | -              |
* | -          | refSpeeds        | vector<double> | m/s or deg/s | -                  | 0        | individual ref speeds               | -              |
* | -          | encRawExposeds   | vector<double> | -            | -                  | 0        | individual EncRawExposed            | -              |
* | -          | velRawExposeds   | vector<double> | -            | -                  | 0        | individual VelRawExposed            | -              |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device EmulatedControlBoard --axes 5 --jmcMs 20 --mode <mandatory_value> --genInitPos 0.0 --genJointTol 0.25 --genMaxLimit 180.0 --genMinLimit -180.0 --genRefSpeed 7.5 --genEncRawExposed 0.0174532925199433 --genVelRawExposed 0.0174532925199433 --initPoss <optional_value> --jointTols <optional_value> --maxLimits <optional_value> --minLimits <optional_value> --refSpeeds <optional_value> --encRawExposeds <optional_value> --velRawExposeds <optional_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device EmulatedControlBoard --mode <mandatory_value>
* \endcode
*
*/

class EmulatedControlBoard_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    EmulatedControlBoard_ParamsParser();
    ~EmulatedControlBoard_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"EmulatedControlBoard"};
    const std::string m_device_name = {"EmulatedControlBoard"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_axes_defaultValue = {"5"};
    const std::string m_jmcMs_defaultValue = {"20"};
    const std::string m_mode_defaultValue = {""};
    const std::string m_genInitPos_defaultValue = {"0.0"};
    const std::string m_genJointTol_defaultValue = {"0.25"};
    const std::string m_genMaxLimit_defaultValue = {"180.0"};
    const std::string m_genMinLimit_defaultValue = {"-180.0"};
    const std::string m_genRefSpeed_defaultValue = {"7.5"};
    const std::string m_genEncRawExposed_defaultValue = {"0.0174532925199433"};
    const std::string m_genVelRawExposed_defaultValue = {"0.0174532925199433"};
    const std::string m_initPoss_defaultValue = {""};
    const std::string m_jointTols_defaultValue = {""};
    const std::string m_maxLimits_defaultValue = {""};
    const std::string m_minLimits_defaultValue = {""};
    const std::string m_refSpeeds_defaultValue = {""};
    const std::string m_encRawExposeds_defaultValue = {""};
    const std::string m_velRawExposeds_defaultValue = {""};

    int m_axes = {5};
    int m_jmcMs = {20};
    std::string m_mode = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    double m_genInitPos = {0.0};
    double m_genJointTol = {0.25};
    double m_genMaxLimit = {180.0};
    double m_genMinLimit = {-180.0};
    double m_genRefSpeed = {7.5};
    double m_genEncRawExposed = {0.0174532925199433};
    double m_genVelRawExposed = {0.0174532925199433};
    std::vector<double> m_initPoss = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_jointTols = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_maxLimits = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_minLimits = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_refSpeeds = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_encRawExposeds = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_velRawExposeds = {}; //The default value of this list is an empty list. It is highly recommended to provide a suggested value also for optional string parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
